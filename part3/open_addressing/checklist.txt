<MAP variety: Enhanced Hashmap with Open Addressing> written by <Pogash>, <Eric>
COP 3530, 2014F <1085>
======================================================================
Part III: hashmaps with Open Addressing
======================================================================
My MAP implementation uses the data structure described in the part II
instructions and conforms to the technique required for this map
variety: <yes>

My MAP implementation 100% correctly supports all three probing 
techniques: <yes>

My MAP implementation 100% correctly supports the following key types:
* signed int: <yes>
* double: <yes>
* c-string: <yes>
* std::string: <yes>

My MAP implementation 100% correctly supports the ANY value type: <yes>

My MAP implementation 100% correctly supports the following methods
as described in part I:

* clear: <yes>
* is_empty: <yes>
* capacity: <yes>
* size: <yes>
* load: <yes>
* print: <yes>

My MAP implementation 100% correctly supports the following revised 
and new methods as described in part III:

* insert: <yes>
* remove: <yes>
* search: <yes>
* cluster_distribution(): <yes>
* remove_random(): <yes>


======================================================================
FOR ALL PARTS
======================================================================

My MAP implementation compiles correctly using g++ v4.8.2 on the
OpenBSD VM: <yes>

My TEST compiles correctly using g++ v4.8.2 on the OpenBSD VM: <yes>

My TESTS run correctly on the OpenBSD VM: <yes>

I affirm that all the responsess I have provided above are 100% true.
Should it be determined that any are not 100% true, I agree to take a 0
(zero) on the assignment: <yes>

I affirm that I am the sole author of this <MAP variety: Enhanced Hashmap with Open Addressing>
and the associated tests.  
<Eric> <Pogash>, <11/30/2014> in COP3520 section <1085>

----------------------------------------------------------------------
Each class has its own method for separate testing, so you must compile
each class along with the test cases separately.
----------------------------------------------------------------------

How to compile and run my unit tests on the OpenBSD VM
Linear Probe Map:
g++ -c -std=c++11 LinearProbingTests.cpp
g++ -o linear LinearProbingTests.o
./linear

Quadratic:
g++ -c -std=c++11 QuadraticProbingTests.cpp
g++ -o quadratic QuadraticProbingTests.o
./quadratic

Rehashing:
g++ -c -std=c++11 RehashingTests.cpp
g++ -o rehashing RehashingTests.o
./rehashing

